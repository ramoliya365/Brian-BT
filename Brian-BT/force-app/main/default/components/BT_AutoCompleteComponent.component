<apex:component controller="BT_AutoCompleteComponentController" selfClosing="true">
<apex:attribute name="sObject" description="SOQL Object to query"
        type="String" assignTo="{!sObjVal}" required="true" />
    <apex:attribute name="labelField"
        description="API Name of Field to display for label" type="String"
        required="true" assignTo="{!labelFieldVar}"/>
    <apex:attribute name="valueField"
        description="API Name of Field to display for value that is passed to the targetField"
        type="String" required="true" assignTo="{!valueFieldVar}"/>
    <apex:attribute name="targetField"
        description="Field of current object that will hold the selection."
        type="Object" assignTo="{!targetFieldVar}"/>
    <apex:attribute name="inputFieldId"
        description="Id of the field where the value will copied[Not generally required, used when you need to copy value to a field using js]"
        type="String" />
    <apex:attribute name="syncManualEntry"
        description="Allow manual entry of data from autocomplete component."
        type="Boolean" default="true" />
    <apex:attribute name="allowClear" 
        description="Set true to give user a option to clear existing value" type="Boolean" default="true"/>
    <apex:attribute name="whereClause"
        description="Add where clause to the search"
        type="String" />
    <apex:attribute name="onChangeFunction"
        description="Action function name, which we want to Call on onChange event"
        type="String" />
    <apex:attribute name="isRequired"
        description="If true, mark auto complete field required."
        type="Boolean" default="false"/>
    <apex:attribute name="style" description="Style for the input component" type="String"/>
    <apex:attribute name="skipFirstSearchResult"
        description="If true, first search result(user entered string) will be skipped from search result."
        type="Boolean" default="true"/>
         
    <c:BT_JsAndCssIncludeComponent importJquery="true" importAutoComplete="true" />
    
    <style>
        .requiredInput1{
            position: relative;
            height: 27px;
            display: inline-block;
        }
        .requiredBlock1 {
            background-color: #c00;
            position: absolute;
            left: -4px;
            width: 3px;
            top: 1px;
            bottom: 1px;
            margin-top: 12px;
            height: 25px
       }
    </style>
    <script>
        var v2{!randomJsIden};
        var prevVal{!randomJsIden};
        function autocompleteV2{!randomJsIden}(){
            var v2=this;
            jQuery(function($){
                v2.init($)
            });
        }
        
        autocompleteV2{!randomJsIden}.prototype={
            init : function($){
                var j$elem = j$( ".auto{!randomJsIden}" ).select2({
                    minimumInputLength: 1,
                    placeholder: "No value selected",
                    allowClear : {!allowClear},
                    skipFirstSearchResult: {!skipFirstSearchResult}, 
                    query: function (query) {
                      queryData{!randomJsIden}(query);
                    },
                    createSearchChoice:function(term, data) {
                      if({!syncManualEntry} == true){
                        return {id:term, text:term};
                      }
                    }
                });
    
                j$elem.on("select2-selecting", function(e) {
                    j$('.hiddenField{!randomJsIden}').val(e.val);
                    console.log('evalue----'+e.val);
                    if('{!sObjVal}' == 'Account'){
						console.log('evalue----'+e.val);
						window.selectedaccount = e.val;
					}
                });
    
                j$elem.on("select2-removed", function(e) {
                    j$('.hiddenField{!randomJsIden}').val('');
                });
                if({!cacheField !=''}){
                    j$elem.select2("data", {id: "{!targetFieldVar}", text: "{!cacheField}"})  
                }  
            },
                    
            triggerSearch :function(val){
                if(prevVal{!randomJsIden} != val){
                    j$=jQuery;
                    prevVal{!randomJsIden} = val;
                    var select = j$('input.auto{!randomJsIden}');          
                    var search = j$('.select2-input')
                    select.select2('open');
                    search.val(val);
                    search.trigger("input");
                }
            }
        }

        /*
        *This method queries data according to the passed parameter
        *and populates the combobox accordingly
        ***/    
        function queryData{!randomJsIden}(query){
            console.log('whereClause::',query);
            var contactquery = "{!whereClause}";
            if('{!sObjVal}' == 'Contact' && window.selectedaccount != null){
               
                contactquery = "accountid = \'"+window.selectedaccount+"\'";
                
            }
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BT_AutoCompleteComponentController.getData}','{!sObjVal}','{!labelFieldVar}','{!valueFieldVar}',contactquery,query.term,
            function(result, event){
                //if success
                if(event.status){ 
                    var data = {results: []}
                    if(result.length > 0){
                    	data.results = result;
                    }else {
                    	data.results = [{id:"", text:"No records found.", disabled: true}];
                    }                        
                    query.callback( data);                           
                } else{
                    alert('Invalid Field/Object API Name : '+event.message);
                }
            }, 
            {escape: false}
            );
        }
    </script>
    
    <apex:outputPanel rendered="{!isRequired}">
        <div class="requiredInput1">
            <div class="requiredBlock1"></div>
        </div>
        <apex:inputText style="{!Style}" id="requiredAutoCompleteTxt" styleClass="auto{!randomJsIden}" value="{!cacheField}" onChange="if('{!onChangeFunction}' != null){{!onChangeFunction}(j$(this).val());}return false;" />
    </apex:outputPanel>
    <apex:outputPanel rendered="{! !isRequired}">
        <apex:inputText style="{!Style}" id="autoCompleteTxt" styleClass="auto{!randomJsIden}" value="{!cacheField}" onChange="if('{!onChangeFunction}' != null){{!onChangeFunction}(j$(this).val());}return false;" />
    </apex:outputPanel>
    <apex:outputPanel id="hiddenPanel">
        <apex:inputText value="{!targetField}" id="hiddenField"
            styleClass="hiddenField{!randomJsIden}" style="display:none"/>
    </apex:outputPanel>
    <script>v2{!randomJsIden} = new autocompleteV2{!randomJsIden}({});</script>
</apex:component>