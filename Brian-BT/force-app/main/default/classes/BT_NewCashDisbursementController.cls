public with sharing class BT_NewCashDisbursementController {
     @AuraEnabled 
     public static String getFieldSet(String objectName, String fieldSetName){
         String result = '';
         List<String> pickListValuesList = new List<String>();
         try{
             SObjectType objToken = Schema.getGlobalDescribe().get(objectName);
             Schema.DescribeSObjectResult d = objToken.getDescribe();
             Map<String, Schema.FieldSet> FsMap = d.fieldSets.getMap();
             if (FsMap.containsKey(fieldSetName)){
                 for (Schema.FieldSetMember f : FsMap.get(fieldSetName).getFields()){
                     if (result != ''){
                         result += ',';
                     }
                     String jsonPart = '{';
                     jsonPart += '"label":"' + f.getLabel()+'",';
                     jsonPart += '"required":"' + (f.getDBRequired() || f.getRequired())+'",';
                     jsonPart += '"type":"' + (f.getType())+'",';
                     jsonPart += '"name":"' + f.getFieldPath()+'"';
                     if (String.valueOf(f.getType()) == 'PICKLIST'){
                         pickListValuesList = getDropDown(objectName, String.valueOf(f.getFieldPath()));
                         jsonPart += ',"pickListValuesList":' + JSON.serialize(pickListValuesList);
                     }
                     jsonPart += '}';
                     result += jsonPart;
                 }
             }
             
         } catch (Exception e){
             result += e.getLineNumber()+' : ' + e.getMessage();
             System.debug('Error::' + e.getMessage());
             System.debug('Error At Line::' + e.getLineNumber());
         }
         return '[' + result + ']';
     }
     
     @AuraEnabled
     public static List<String> getDropDown(String objName, String fieldName){
         List<String> pickListValuesList = new List<String>();
         try{
             Schema.SObjectType s = Schema.getGlobalDescribe().get(objName);
             Schema.DescribeSObjectResult r = s.getDescribe();
             Map<String, Schema.SObjectField> fields = r.fields.getMap();
             Schema.DescribeFieldResult fieldResult = fields.get(fieldName).getDescribe();
             List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
             for (Schema.PicklistEntry pickListVal : ple){
                 pickListValuesList.add(pickListVal.getLabel());
             }
         } catch (Exception e){
             throw new AuraHandledException(e.getMessage());
         }
         return pickListValuesList;
     }

}